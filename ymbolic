FTW(3)                                          Linux Programmer's Manual                                          FTW(3)

NNAAMMEE
       ftw, nftw - file tree walk

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ffttww..hh>>

       iinntt nnffttww((ccoonnsstt cchhaarr **_d_i_r_p_a_t_h,,
               iinntt ((**_f_n)) ((ccoonnsstt cchhaarr **_f_p_a_t_h,, ccoonnsstt ssttrruucctt ssttaatt **_s_b,,
                          iinntt _t_y_p_e_f_l_a_g,, ssttrruucctt FFTTWW **_f_t_w_b_u_f)),,
               iinntt _n_o_p_e_n_f_d,, iinntt _f_l_a_g_s));;

       ##iinncclluuddee <<ffttww..hh>>

       iinntt ffttww((ccoonnsstt cchhaarr **_d_i_r_p_a_t_h,,
               iinntt ((**_f_n)) ((ccoonnsstt cchhaarr **_f_p_a_t_h,, ccoonnsstt ssttrruucctt ssttaatt **_s_b,,
                          iinntt _t_y_p_e_f_l_a_g)),,
               iinntt _n_o_p_e_n_f_d));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       nnffttww(): _XOPEN_SOURCE >= 500

DDEESSCCRRIIPPTTIIOONN
       nnffttww()  walks through the directory tree that is located under the directory _d_i_r_p_a_t_h, and calls _f_n() once for each
       entry in the tree.  By default, directories are handled before the files and subdirectories they contain (preorder
       traversal).

       To  avoid using up all of the calling process's file descriptors, _n_o_p_e_n_f_d specifies the maximum number of directo‐
       ries that nnffttww() will hold open simultaneously.  When the search depth exceeds this, nnffttww() will become slower be‐
       cause  directories  have to be closed and reopened.  nnffttww() uses at most one file descriptor for each level in the
       directory tree.

       For each entry found in the tree, nnffttww() calls _f_n() with four arguments: _f_p_a_t_h, _s_b, _t_y_p_e_f_l_a_g, and  _f_t_w_b_u_f.   _f_p_a_t_h
       is  the  pathname  of  the  entry, and is expressed either as a pathname relative to the calling process's current
       working directory at the time of the call to nnffttww(), if _d_i_r_p_a_t_h was expressed as a relative pathname, or as an ab‐
       solute pathname, if _d_i_r_p_a_t_h was expressed as an absolute pathname.  _s_b is a pointer to the _s_t_a_t structure returned
       by a call to ssttaatt(2) for _f_p_a_t_h.

       The _t_y_p_e_f_l_a_g argument passed to _f_n() is an integer that has one of the following values:

       FFTTWW__FF  _f_p_a_t_h is a regular file.

       FFTTWW__DD  _f_p_a_t_h is a directory.

       FFTTWW__DDNNRR
              _f_p_a_t_h is a directory which can't be read.

       FFTTWW__DDPP _f_p_a_t_h is a directory, and FFTTWW__DDEEPPTTHH was specified in _f_l_a_g_s.  (If FFTTWW__DDEEPPTTHH was not specified in _f_l_a_g_s, then
              directories will always be visited with _t_y_p_e_f_l_a_g set to FFTTWW__DD.)  All of the files and subdirectories within
              _f_p_a_t_h have been processed.

       FFTTWW__NNSS The ssttaatt(2) call failed on _f_p_a_t_h, which is not a symbolic link.  The probable cause for this  is  that  the
              caller  had  read permission on the parent directory, so that the filename _f_p_a_t_h could be seen, but did not
              have execute permission, so that the file could not be reached for ssttaatt(2).  The  contents  of  the  buffer
              pointed to by _s_b are undefined.

       FFTTWW__SSLL _f_p_a_t_h is a symbolic link, and FFTTWW__PPHHYYSS was set in _f_l_a_g_s.

       FFTTWW__SSLLNN
              _f_p_a_t_h  is  a  symbolic link pointing to a nonexistent file.  (This occurs only if FFTTWW__PPHHYYSS is not set.)  On
              most implementations, in this case the _s_b argument passed to _f_n() contains information returned by perform‐
              ing llssttaatt(2) on the symbolic link.  For the details on Linux, see BUGS.

       The fourth argument (_f_t_w_b_u_f) that nnffttww() supplies when calling _f_n() is a pointer to a structure of type _F_T_W:

           struct FTW {
               int base;
               int level;
           };

       _b_a_s_e  is the offset of the filename (i.e., basename component) in the pathname given in _f_p_a_t_h.  _l_e_v_e_l is the depth
       of _f_p_a_t_h in the directory tree, relative to the root of the tree (_d_i_r_p_a_t_h, which has depth 0).

       To stop the tree walk, _f_n() returns a nonzero value; this value will become the return value of nnffttww().   As  long
       as  _f_n()  returns 0, nnffttww() will continue either until it has traversed the entire tree, in which case it will re‐
       turn zero, or until it encounters an error (such as a mmaalllloocc(3) failure), in which case it will return -1.

       Because nnffttww() uses dynamic data structures, the only safe way to exit out of a tree walk is to return  a  nonzero
       value  from  _f_n().   To allow a signal to terminate the walk without causing a memory leak, have the handler set a
       global flag that is checked by _f_n().  _D_o_n_'_t use lloonnggjjmmpp(3) unless the program is going to terminate.

       The _f_l_a_g_s argument of nnffttww() is formed by ORing zero or more of the following flags:

       FFTTWW__AACCTTIIOONNRREETTVVAALL (since glibc 2.3.3)
              If this glibc-specific flag is set, then nnffttww() handles the  return  value  from  _f_n()  differently.   _f_n()
              should return one of the following values:

              FFTTWW__CCOONNTTIINNUUEE
                     Instructs nnffttww() to continue normally.

              FFTTWW__SSKKIIPP__SSIIBBLLIINNGGSS
                     If  _f_n() returns this value, then siblings of the current entry will be skipped, and processing con‐
                     tinues in the parent.

              FFTTWW__SSKKIIPP__SSUUBBTTRREEEE
                     If _f_n() is called with an entry that is a directory (_t_y_p_e_f_l_a_g is FFTTWW__DD), this return value will pre‐
                     vent  objects  within  that directory from being passed as arguments to _f_n().  nnffttww() continues pro‐
                     cessing with the next sibling of the directory.

              FFTTWW__SSTTOOPP
                     Causes nnffttww() to return immediately with the return value FFTTWW__SSTTOOPP.

              Other return values could be associated with new actions in the future; _f_n() should not return values other
              than those listed above.

              The  feature  test macro __GGNNUU__SSOOUURRCCEE must be defined (before including _a_n_y header files) in order to obtain
              the definition of FFTTWW__AACCTTIIOONNRREETTVVAALL from _<_f_t_w_._h_>.

       FFTTWW__CCHHDDIIRR
              If set, do a cchhddiirr(2) to each directory before handling its contents.  This is useful if the program  needs
              to perform some action in the directory in which _f_p_a_t_h resides.  (Specifying this flag has no effect on the
              pathname that is passed in the _f_p_a_t_h argument of _f_n.)

       FFTTWW__DDEEPPTTHH
              If set, do a post-order traversal, that is, call _f_n() for the directory itself _a_f_t_e_r handling the  contents
              of the directory and its subdirectories.  (By default, each directory is handled _b_e_f_o_r_e its contents.)

       FFTTWW__MMOOUUNNTT
              If set, stay within the same filesystem (i.e., do not cross mount points).

       FFTTWW__PPHHYYSS
              If  set,  do not follow symbolic links.  (This is what you want.)  If not set, symbolic links are followed,
              but no file is reported twice.

              If FFTTWW__PPHHYYSS is not set, but FFTTWW__DDEEPPTTHH is set, then the function _f_n() is never called for a  directory  that
              would be a descendant of itself.

   ffttww(())
       ffttww()  is  an  older function that offers a subset of the functionality of nnffttww().  The notable differences are as
       follows:

       *  ffttww() has no _f_l_a_g_s argument.  It behaves the same as when nnffttww() is called with _f_l_a_g_s specified as zero.

       *  The callback function, _f_n(), is not supplied with a fourth argument.

       *  The range of values that is passed via the _t_y_p_e_f_l_a_g argument supplied to _f_n() is smaller:  just  FFTTWW__FF,  FFTTWW__DD,
          FFTTWW__DDNNRR, FFTTWW__NNSS, and (possibly) FFTTWW__SSLL.

RREETTUURRNN VVAALLUUEE
       These functions return 0 on success, and -1 if an error occurs.

       If _f_n() returns nonzero, then the tree walk is terminated and the value returned by _f_n() is returned as the result
       of ffttww() or nnffttww().

       If nnffttww() is called with the FFTTWW__AACCTTIIOONNRREETTVVAALL flag, then the only nonzero value that should be  used  by  _f_n()  to
       terminate the tree walk is FFTTWW__SSTTOOPP, and that value is returned as the result of nnffttww().

VVEERRSSIIOONNSS
       nnffttww() is available under glibc since version 2.1.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌──────────┬───────────────┬─────────────┐
       │IInntteerrffaaccee │ AAttttrriibbuuttee     │ VVaalluuee       │
       ├──────────┼───────────────┼─────────────┤
       │nnffttww()    │ Thread safety │ MT-Safe cwd │
       ├──────────┼───────────────┼─────────────┤
       │ffttww()     │ Thread safety │ MT-Safe     │
       └──────────┴───────────────┴─────────────┘

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, SVr4, SUSv1.  POSIX.1-2008 marks ffttww() as obsolete.

NNOOTTEESS
       POSIX.1-2008 notes that the results are unspecified if _f_n does not preserve the current working directory.

       The function nnffttww() and the use of FFTTWW__SSLL with ffttww() were introduced in SUSv1.

       In  some  implementations (e.g., glibc), ffttww() will never use FFTTWW__SSLL, on other systems FFTTWW__SSLL occurs only for sym‐
       bolic links that do not point to an existing file, and again on other systems ffttww() will use FFTTWW__SSLL for each  sym‐
       bolic  link.   If  _f_p_a_t_h  is  a symbolic link and ssttaatt(2) failed, POSIX.1-2008 states that it is undefined whether
       FFTTWW__NNSS or FFTTWW__SSLL is passed in _t_y_p_e_f_l_a_g.  For predictable results, use nnffttww().

BBUUGGSS
       In the specification of nnffttww(), POSIX.1 notes that when FFTTWW__NNSS is passed as the _t_y_p_e_f_l_a_g argument  of  _f_n(),  then
       the  contents of the buffer pointed to by the _s_b argument are undefined.  The standard makes no such statement for
       the case where FFTTWW__SSLLNN is passed in _t_y_p_e_f_l_a_g, with the implication that the contents of the buffer pointed  to  by
       _s_b are defined.  And indeed this is the case on most implementations: the buffer pointed to by _s_b contains the re‐
       sults produced by applying llssttaatt(2) to the symbolic link.  In early glibc, the behavior was  the  same.   However,
       since  glibc  2.4,  the  contents of the buffer pointed to by _s_b are undefined when FFTTWW__SSLLNN is passed in _t_y_p_e_f_l_a_g.
       This change _a_p_p_e_a_r_s to be an unintended regression, but it is not (yet) clear if the behavior will be restored  to
       that provided in the original glibc implementation (and on other implementations).

EEXXAAMMPPLLEE
       The following program traverses the directory tree under the path named in its first command-line argument, or un‐
       der the current directory if no argument is supplied.  It displays various information about each file.  The  sec‐
       ond  command-line argument can be used to specify characters that control the value assigned to the _f_l_a_g_s argument
       when calling nnffttww().

   PPrrooggrraamm ssoouurrccee

       #define _XOPEN_SOURCE 500
       #include <ftw.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <string.h>
       #include <stdint.h>

       static int
       display_info(const char *fpath, const struct stat *sb,
                    int tflag, struct FTW *ftwbuf)
       {
           printf("%-3s %2d ",
                   (tflag == FTW_D) ?   "d"   : (tflag == FTW_DNR) ? "dnr" :
                   (tflag == FTW_DP) ?  "dp"  : (tflag == FTW_F) ?   "f" :
                   (tflag == FTW_NS) ?  "ns"  : (tflag == FTW_SL) ?  "sl" :
                   (tflag == FTW_SLN) ? "sln" : "???",
                   ftwbuf->level);

           if (tflag == FTW_NS)
               printf("-------");
           else
               printf("%7jd", (intmax_t) sb->st_size);

           printf("   %-40s %d %s\n",
                   fpath, ftwbuf->base, fpath + ftwbuf->base);

           return 0;           /* To tell nftw() to continue */
       }

       int
       main(int argc, char *argv[])
       {
           int flags = 0;

           if (argc > 2 && strchr(argv[2], 'd') != NULL)
               flags |= FTW_DEPTH;
           if (argc > 2 && strchr(argv[2], 'p') != NULL)
               flags |= FTW_PHYS;

           if (nftw((argc < 2) ? "." : argv[1], display_info, 20, flags)
                   == -1) {
               perror("nftw");
               exit(EXIT_FAILURE);
           }

           exit(EXIT_SUCCESS);
       }

SSEEEE AALLSSOO
       ssttaatt(2), ffttss(3), rreeaaddddiirr(3)

CCOOLLOOPPHHOONN
       This page is part of release 5.05 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about
       reporting bugs, and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                                   2019-03-06                                                 FTW(3)
